/* autogenerated by Processing revision 1293 on 2023-10-16 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Processing extends PApplet {

ArrayList<Circle> circles = new ArrayList<Circle>();

static final int MAX_ITER =7;
Circle parentCircle = new Circle(400,400,800,177,3);
public void setup() {
    /* size commented out by preprocessor */;
    /* smooth commented out by preprocessor */;
    apollo(MAX_ITER,parentCircle);
    
}

public void draw() {
    background(210,160,120);
    parentCircle.display();
    for (Circle c : circles) {
        c.display();
        
    }
    save("meditate.png");
}

class Circle {
  float x;//center X
  float y;//center Y
  float r;//radius
  float c;//color
  float s;//strokeWidth
  
  Circle(float x, float y, float r, float c, float s) {
    this.x = x;
    this.y = y;
    this.r = r;
    this.c = c;
    this.s = s;
  }
  
  public void display() {
    stroke(210,160,120);
    strokeWeight(s);
    int q = color(c);
    fill(q);
    circle(x, y,r);
  }
}


float sWeight =1;
float black = 0; 
float white =255;
public void apollo(int amtOfIter, Circle parent){
    // exit condition
    if (amtOfIter <=0){
        return;
    }
    Circle[] innerCircles = new Circle[10];
    float tX=parent.x;
    float tY=parent.y;
    float rad = parent.r;
    if (rad <=200){
        sWeight=0;
    }

    Circle c1= new Circle(tX - (.25f*rad),tY,.5f*rad,white,sWeight); //left
    Circle c2= new Circle(tX + (.25f*rad),tY,rad/2,black,sWeight+.1f); //right
    Circle c3 = new Circle(tX,tY -(.333f*rad),rad/3,white,sWeight); //top
    Circle c4 = new Circle(tX,tY +(.333f*rad),rad/3,black,sWeight+.1f); //bot
    Circle c5 = new Circle(tX-(.25f*rad),(tY-.333f*rad),rad/6,white,sWeight*.6f); //NW
    Circle c6 = new Circle(tX-(.25f*rad),(tY+.333f*rad),rad/6,black,sWeight*.6f); //NE
    Circle c7 = new Circle(tX+(.25f*rad),(tY-.333f*rad),rad/6,white,sWeight*.6f); //SW
    Circle c8 = new Circle(tX+(.25f*rad),(tY+.333f*rad),rad/6,black,sWeight*.6f); //SE
    Circle c9 = new Circle(tX,tY+(.133f*rad),(.06667f*rad),black,0);
    Circle c10 = new Circle(tX,tY-(.133f*rad),(.06667f*rad),white,0);

    
    innerCircles[0] = c1;
    innerCircles[1] = c2;
    innerCircles[2] = c3;
    innerCircles[3] = c4;
    innerCircles[4] = c5;
    innerCircles[5] = c6;
    innerCircles[6] = c7;
    innerCircles[7] = c8;
    innerCircles[8] = c9;
    innerCircles[9]=c10;



    

    for (Circle babyCircle : innerCircles) {
        circles.add(babyCircle);
        apollo(amtOfIter - 1, babyCircle);
    }


}


  public void settings() { size(800, 800);
smooth(4); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Processing" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
